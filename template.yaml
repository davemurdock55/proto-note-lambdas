AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  wiki-realms-lambdas

  Sample SAM Template for wiki-realms-lambdas

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON

Resources:
  # The API Gateway
  WikiRealmsApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: WikiRealmsApi
      StageName: Prod
      Auth:
        Authorizers:
          WikiRealmsTokenAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt AuthorizeFunction.Arn # Change to AuthorizeFunction
            Identity:
              Headers:
                - Authorization

    # Authorize function (API Gateway Authorizer)
  AuthorizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/auth/authorize
      Handler: app.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Layers:
        - !Ref CommonsLayer
        - !Ref AuthLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: login-database
      Environment:
        Variables:
          JWT_SECRET: !Sub "{{resolve:secretsmanager:wiki-realms/JWT_Token:SecretString:JWT_SECRET}}"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2021
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - commons
          - auth

  # Hello World function
  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/hello-world/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref WikiRealmsApi
            Path: /hello
            Method: get
            Auth:
              Authorizer: WikiRealmsTokenAuthorizer
      Layers:
        - !Ref CommonsLayer
      Environment:
        Variables:
          NODE_OPTIONS: " --enable-source-maps"
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2021
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - commons

  # Register function
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/auth/register
      Handler: app.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        Register:
          Type: Api
          Properties:
            RestApiId: !Ref WikiRealmsApi
            Path: /auth/register
            Method: post
      Layers:
        - !Ref CommonsLayer
        - !Ref AuthLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: login-database
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2021
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - commons
          - auth

  # Login function
  LoginFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/auth/login
      Handler: app.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        Login:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref WikiRealmsApi
            Path: /auth/login
            Method: post
      Layers:
        - !Ref CommonsLayer
        - !Ref AuthLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: login-database
      Environment:
        Variables:
          JWT_SECRET: !Sub "{{resolve:secretsmanager:wiki-realms/JWT_Token:SecretString:JWT_SECRET}}"
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2021
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - commons
          - auth

  # Logout function
  LogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/auth/logout
      Handler: app.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        Logout:
          Type: Api
          Properties:
            RestApiId: !Ref WikiRealmsApi
            Path: /auth/logout
            Method: post
      Layers:
        - !Ref CommonsLayer
        - !Ref AuthLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: login-database
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2021
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - commons
          - auth

  # Verify function
  VerifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/auth/verify
      Handler: app.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        Verify:
          Type: Api
          Properties:
            RestApiId: !Ref WikiRealmsApi
            Path: /auth/verify
            Method: post
      Layers:
        - !Ref CommonsLayer
        - !Ref AuthLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: login-database
      Environment:
        Variables:
          JWT_SECRET: !Sub "{{resolve:secretsmanager:wiki-realms/JWT_Token:SecretString:JWT_SECRET}}"
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2021
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - commons
          - auth

  # Sync Notes function
  SyncNotesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/notes/sync
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Events:
        SyncNotes:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref WikiRealmsApi
            Path: /notes/sync
            Method: post
            Auth:
              Authorizer: WikiRealmsTokenAuthorizer
      Layers:
        - !Ref CommonsLayer
        - !Ref DataLayer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: notes-database
      Environment:
        Variables:
          NODE_OPTIONS: " --enable-source-maps"
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2021
        Sourcemap: true
        EntryPoints:
          - app.ts
        External:
          - commons
          - data

  # Common Layer Resources
  CommonsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/commons/
      CompatibleRuntimes:
        - nodejs22.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile

  # Auth Layer
  AuthLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/auth/
      CompatibleRuntimes:
        - nodejs22.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile

  # Data Layer
  DataLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: layers/data/
      CompatibleRuntimes:
        - nodejs22.x
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: makefile

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api

  # Hello World function
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${WikiRealmsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  HelloWorldFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn

  # Register function
  RegisterApi:
    Description: API Gateway endpoint URL for Prod stage for Register function
    Value: !Sub "https://${WikiRealmsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/auth/register/"
  RegisterFunction:
    Description: Register Lambda Function ARN
    Value: !GetAtt RegisterFunction.Arn
  RegisterFunctionIamRole:
    Description: Implicit IAM Role created for Register function
    Value: !GetAtt RegisterFunctionRole.Arn

  # Login function
  LoginApi:
    Description: API Gateway endpoint URL for Prod stage for Login function
    Value: !Sub "https://${WikiRealmsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/auth/login/"
  LoginFunction:
    Description: Login Lambda Function ARN
    Value: !GetAtt LoginFunction.Arn
  LoginFunctionIamRole:
    Description: Implicit IAM Role created for Login function
    Value: !GetAtt LoginFunctionRole.Arn

  # Logout function
  LogoutApi:
    Description: API Gateway endpoint URL for Prod stage for Log out function
    Value: !Sub "https://${WikiRealmsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/auth/logout/"
  LogoutFunction:
    Description: Log out Lambda Function ARN
    Value: !GetAtt LogoutFunction.Arn
  LogoutFunctionIamRole:
    Description: Implicit IAM Role created for Log out function
    Value: !GetAtt LogoutFunctionRole.Arn

  # Verify function
  VerifyApi:
    Description: API Gateway endpoint URL for Prod stage for Verify function
    Value: !Sub "https://${WikiRealmsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/auth/verify/"
  VerifyFunction:
    Description: Verify Lambda Function ARN
    Value: !GetAtt VerifyFunction.Arn
  VerifyFunctionIamRole:
    Description: Implicit IAM Role created for Verify function
    Value: !GetAtt VerifyFunctionRole.Arn

  # Sync Notes function
  SyncNotesApi:
    Description: API Gateway endpoint URL for Prod stage for the Sync Notes function
    Value: !Sub "https://${WikiRealmsApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/notes/sync"
  SyncNotesFunction:
    Description: Sync Notes Lambda Function ARN
    Value: !GetAtt SyncNotesFunction.Arn
  SyncNotesFunctionIamRole:
    Description: Implicit IAM Role created for the Sync Notes function
    Value: !GetAtt SyncNotesFunctionRole.Arn
